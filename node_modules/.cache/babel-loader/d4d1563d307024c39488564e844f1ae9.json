{"ast":null,"code":"import $fZ9Rb$react, { useContext as $fZ9Rb$useContext, useMemo as $fZ9Rb$useMemo, useState as $fZ9Rb$useState, useLayoutEffect as $fZ9Rb$useLayoutEffect } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $6f523efd7517f7a2$exports = {};\n$parcel$export($6f523efd7517f7a2$exports, \"SSRProvider\", () => $6f523efd7517f7a2$export$9f8ac96af4b1b2ae);\n$parcel$export($6f523efd7517f7a2$exports, \"useSSRSafeId\", () => $6f523efd7517f7a2$export$619500959fc48b26);\n$parcel$export($6f523efd7517f7a2$exports, \"useIsSSR\", () => $6f523efd7517f7a2$export$535bd6ca7f90a273); // Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\n\nconst $6f523efd7517f7a2$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\nconst $6f523efd7517f7a2$var$SSRContext = /*#__PURE__*/$fZ9Rb$react.createContext($6f523efd7517f7a2$var$defaultContext);\n\nfunction $6f523efd7517f7a2$export$9f8ac96af4b1b2ae(props) {\n  let cur = $fZ9Rb$useContext($6f523efd7517f7a2$var$SSRContext);\n  let value = $fZ9Rb$useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $6f523efd7517f7a2$var$defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n  return /*#__PURE__*/$fZ9Rb$react.createElement($6f523efd7517f7a2$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nlet $6f523efd7517f7a2$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nfunction $6f523efd7517f7a2$export$619500959fc48b26(defaultId) {\n  let ctx = $fZ9Rb$useContext($6f523efd7517f7a2$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n\n  if (ctx === $6f523efd7517f7a2$var$defaultContext && !$6f523efd7517f7a2$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  return $fZ9Rb$useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\nfunction $6f523efd7517f7a2$export$535bd6ca7f90a273() {\n  let cur = $fZ9Rb$useContext($6f523efd7517f7a2$var$SSRContext);\n  let isInSSRContext = cur !== $6f523efd7517f7a2$var$defaultContext;\n  let [isSSR, setIsSSR] = $fZ9Rb$useState(isInSSRContext); // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n\n  if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    $fZ9Rb$useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  return isSSR;\n}\n\nexport { $6f523efd7517f7a2$export$9f8ac96af4b1b2ae as SSRProvider, $6f523efd7517f7a2$export$619500959fc48b26 as useSSRSafeId, $6f523efd7517f7a2$export$535bd6ca7f90a273 as useIsSSR };","map":null,"metadata":{},"sourceType":"module"}